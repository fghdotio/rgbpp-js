// This file is generated by @ckb-lumos/molecule, please do not modify it manually.
/* eslint-disable */
import { bytes, createFixedBytesCodec, molecule } from "@ckb-lumos/codec";
import { Uint32 } from "../customized.js";
import { Byte32, Bytes, Script } from "./blockchain.js";

const { array, vector, union, option, struct, table, byteVecOf } = molecule;

const fallbackBytesCodec = byteVecOf({
  pack: bytes.bytify,
  unpack: bytes.hexify,
});

function createFallbackFixedBytesCodec(byteLength: number) {
  return createFixedBytesCodec({
    pack: bytes.bytify,
    unpack: bytes.hexify,
    byteLength,
  });
}

const byte = createFallbackFixedBytesCodec(1);

export const RGBPPConfig = struct(
  {
    btcLcTypeHash: Byte32,
    btcTimeLockTypeHash: Byte32,
  },
  ["btcLcTypeHash", "btcTimeLockTypeHash"],
);

export const RGBPPLock = struct(
  {
    outIndex: Uint32,
    btcTxid: Byte32,
  },
  ["outIndex", "btcTxid"],
);

export const ExtraCommitmentData = struct(
  {
    inputLen: byte,
    outputLen: byte,
  },
  ["inputLen", "outputLen"],
);

export const Uint16 = createFallbackFixedBytesCodec(2);

export const RGBPPUnlock = table(
  {
    version: Uint16,
    extraData: ExtraCommitmentData,
    btcTx: Bytes,
    btcTxProof: Bytes,
  },
  ["version", "extraData", "btcTx", "btcTxProof"],
);

export const BTCTimeLock = table(
  {
    lockScript: Script,
    after: Uint32,
    btcTxid: Byte32,
  },
  ["lockScript", "after", "btcTxid"],
);

export const BTCTimeLockConfig = struct(
  {
    btcLcTypeHash: Byte32,
  },
  ["btcLcTypeHash"],
);

export const BTCTimeUnlock = table(
  {
    btcTxProof: Bytes,
  },
  ["btcTxProof"],
);
